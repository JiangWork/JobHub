/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.smartframework.jobhub.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-17")
public class MemoryStatus implements org.apache.thrift.TBase<MemoryStatus, MemoryStatus._Fields>, java.io.Serializable, Cloneable, Comparable<MemoryStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MemoryStatus");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField USED_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("usedByte", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdated", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MemoryStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MemoryStatusTupleSchemeFactory());
  }

  public String name; // required
  public long jobId; // required
  public long usedByte; // required
  public long lastUpdated; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    JOB_ID((short)2, "jobId"),
    USED_BYTE((short)3, "usedByte"),
    LAST_UPDATED((short)4, "lastUpdated");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // JOB_ID
          return JOB_ID;
        case 3: // USED_BYTE
          return USED_BYTE;
        case 4: // LAST_UPDATED
          return LAST_UPDATED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __JOBID_ISSET_ID = 0;
  private static final int __USEDBYTE_ISSET_ID = 1;
  private static final int __LASTUPDATED_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USED_BYTE, new org.apache.thrift.meta_data.FieldMetaData("usedByte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_UPDATED, new org.apache.thrift.meta_data.FieldMetaData("lastUpdated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MemoryStatus.class, metaDataMap);
  }

  public MemoryStatus() {
  }

  public MemoryStatus(
    String name,
    long jobId,
    long usedByte,
    long lastUpdated)
  {
    this();
    this.name = name;
    this.jobId = jobId;
    setJobIdIsSet(true);
    this.usedByte = usedByte;
    setUsedByteIsSet(true);
    this.lastUpdated = lastUpdated;
    setLastUpdatedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MemoryStatus(MemoryStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.jobId = other.jobId;
    this.usedByte = other.usedByte;
    this.lastUpdated = other.lastUpdated;
  }

  public MemoryStatus deepCopy() {
    return new MemoryStatus(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setJobIdIsSet(false);
    this.jobId = 0;
    setUsedByteIsSet(false);
    this.usedByte = 0;
    setLastUpdatedIsSet(false);
    this.lastUpdated = 0;
  }

  public String getName() {
    return this.name;
  }

  public MemoryStatus setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getJobId() {
    return this.jobId;
  }

  public MemoryStatus setJobId(long jobId) {
    this.jobId = jobId;
    setJobIdIsSet(true);
    return this;
  }

  public void unsetJobId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobId() {
    return EncodingUtils.testBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  public void setJobIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOBID_ISSET_ID, value);
  }

  public long getUsedByte() {
    return this.usedByte;
  }

  public MemoryStatus setUsedByte(long usedByte) {
    this.usedByte = usedByte;
    setUsedByteIsSet(true);
    return this;
  }

  public void unsetUsedByte() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEDBYTE_ISSET_ID);
  }

  /** Returns true if field usedByte is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedByte() {
    return EncodingUtils.testBit(__isset_bitfield, __USEDBYTE_ISSET_ID);
  }

  public void setUsedByteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEDBYTE_ISSET_ID, value);
  }

  public long getLastUpdated() {
    return this.lastUpdated;
  }

  public MemoryStatus setLastUpdated(long lastUpdated) {
    this.lastUpdated = lastUpdated;
    setLastUpdatedIsSet(true);
    return this;
  }

  public void unsetLastUpdated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTUPDATED_ISSET_ID);
  }

  /** Returns true if field lastUpdated is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdated() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTUPDATED_ISSET_ID);
  }

  public void setLastUpdatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTUPDATED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJobId();
      } else {
        setJobId((Long)value);
      }
      break;

    case USED_BYTE:
      if (value == null) {
        unsetUsedByte();
      } else {
        setUsedByte((Long)value);
      }
      break;

    case LAST_UPDATED:
      if (value == null) {
        unsetLastUpdated();
      } else {
        setLastUpdated((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case JOB_ID:
      return getJobId();

    case USED_BYTE:
      return getUsedByte();

    case LAST_UPDATED:
      return getLastUpdated();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case JOB_ID:
      return isSetJobId();
    case USED_BYTE:
      return isSetUsedByte();
    case LAST_UPDATED:
      return isSetLastUpdated();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MemoryStatus)
      return this.equals((MemoryStatus)that);
    return false;
  }

  public boolean equals(MemoryStatus that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_jobId = true;
    boolean that_present_jobId = true;
    if (this_present_jobId || that_present_jobId) {
      if (!(this_present_jobId && that_present_jobId))
        return false;
      if (this.jobId != that.jobId)
        return false;
    }

    boolean this_present_usedByte = true;
    boolean that_present_usedByte = true;
    if (this_present_usedByte || that_present_usedByte) {
      if (!(this_present_usedByte && that_present_usedByte))
        return false;
      if (this.usedByte != that.usedByte)
        return false;
    }

    boolean this_present_lastUpdated = true;
    boolean that_present_lastUpdated = true;
    if (this_present_lastUpdated || that_present_lastUpdated) {
      if (!(this_present_lastUpdated && that_present_lastUpdated))
        return false;
      if (this.lastUpdated != that.lastUpdated)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_jobId = true;
    list.add(present_jobId);
    if (present_jobId)
      list.add(jobId);

    boolean present_usedByte = true;
    list.add(present_usedByte);
    if (present_usedByte)
      list.add(usedByte);

    boolean present_lastUpdated = true;
    list.add(present_lastUpdated);
    if (present_lastUpdated)
      list.add(lastUpdated);

    return list.hashCode();
  }

  @Override
  public int compareTo(MemoryStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsedByte()).compareTo(other.isSetUsedByte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedByte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedByte, other.usedByte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdated()).compareTo(other.isSetLastUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdated, other.lastUpdated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MemoryStatus(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobId:");
    sb.append(this.jobId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("usedByte:");
    sb.append(this.usedByte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdated:");
    sb.append(this.lastUpdated);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MemoryStatusStandardSchemeFactory implements SchemeFactory {
    public MemoryStatusStandardScheme getScheme() {
      return new MemoryStatusStandardScheme();
    }
  }

  private static class MemoryStatusStandardScheme extends StandardScheme<MemoryStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MemoryStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jobId = iprot.readI64();
              struct.setJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USED_BYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.usedByte = iprot.readI64();
              struct.setUsedByteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_UPDATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastUpdated = iprot.readI64();
              struct.setLastUpdatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MemoryStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
      oprot.writeI64(struct.jobId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USED_BYTE_FIELD_DESC);
      oprot.writeI64(struct.usedByte);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_UPDATED_FIELD_DESC);
      oprot.writeI64(struct.lastUpdated);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MemoryStatusTupleSchemeFactory implements SchemeFactory {
    public MemoryStatusTupleScheme getScheme() {
      return new MemoryStatusTupleScheme();
    }
  }

  private static class MemoryStatusTupleScheme extends TupleScheme<MemoryStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MemoryStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetJobId()) {
        optionals.set(1);
      }
      if (struct.isSetUsedByte()) {
        optionals.set(2);
      }
      if (struct.isSetLastUpdated()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetJobId()) {
        oprot.writeI64(struct.jobId);
      }
      if (struct.isSetUsedByte()) {
        oprot.writeI64(struct.usedByte);
      }
      if (struct.isSetLastUpdated()) {
        oprot.writeI64(struct.lastUpdated);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MemoryStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.jobId = iprot.readI64();
        struct.setJobIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.usedByte = iprot.readI64();
        struct.setUsedByteIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lastUpdated = iprot.readI64();
        struct.setLastUpdatedIsSet(true);
      }
    }
  }

}

